// Code generated by mockery. DO NOT EDIT.

package mock_store

import (
	context "context"
	json "encoding/json"
	models "mimir/internal/models"
	store "mimir/internal/store"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// JobStore is an autogenerated mock type for the JobStore type
type JobStore struct {
	mock.Mock
}

// GetJobByBatchID provides a mock function with given fields: ctx, batchJobID
func (_m *JobStore) GetJobByBatchID(ctx context.Context, batchJobID string) (*models.BackgroundJob, error) {
	ret := _m.Called(ctx, batchJobID)

	if len(ret) == 0 {
		panic("no return value specified for GetJobByBatchID")
	}

	var r0 *models.BackgroundJob
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.BackgroundJob, error)); ok {
		return rf(ctx, batchJobID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.BackgroundJob); ok {
		r0 = rf(ctx, batchJobID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.BackgroundJob)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, batchJobID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListBatchJobs provides a mock function with given fields: ctx, limit, offset
func (_m *JobStore) ListBatchJobs(ctx context.Context, limit int, offset int) ([]*models.BackgroundJob, error) {
	ret := _m.Called(ctx, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for ListBatchJobs")
	}

	var r0 []*models.BackgroundJob
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) ([]*models.BackgroundJob, error)); ok {
		return rf(ctx, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int) []*models.BackgroundJob); ok {
		r0 = rf(ctx, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.BackgroundJob)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = rf(ctx, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RecordBatchAPIInfo provides a mock function with given fields: ctx, jobID, batchJobID, inputFileID
func (_m *JobStore) RecordBatchAPIInfo(ctx context.Context, jobID uuid.UUID, batchJobID string, inputFileID string) error {
	ret := _m.Called(ctx, jobID, batchJobID, inputFileID)

	if len(ret) == 0 {
		panic("no return value specified for RecordBatchAPIInfo")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string, string) error); ok {
		r0 = rf(ctx, jobID, batchJobID, inputFileID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RecordJobEnqueue provides a mock function with given fields: ctx, params
func (_m *JobStore) RecordJobEnqueue(ctx context.Context, params store.JobRecordParams) error {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for RecordJobEnqueue")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, store.JobRecordParams) error); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateJobData provides a mock function with given fields: ctx, jobID, jobData
func (_m *JobStore) UpdateJobData(ctx context.Context, jobID uuid.UUID, jobData json.RawMessage) error {
	ret := _m.Called(ctx, jobID, jobData)

	if len(ret) == 0 {
		panic("no return value specified for UpdateJobData")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, json.RawMessage) error); ok {
		r0 = rf(ctx, jobID, jobData)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateJobStatus provides a mock function with given fields: ctx, jobID, status
func (_m *JobStore) UpdateJobStatus(ctx context.Context, jobID uuid.UUID, status string) error {
	ret := _m.Called(ctx, jobID, status)

	if len(ret) == 0 {
		panic("no return value specified for UpdateJobStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) error); ok {
		r0 = rf(ctx, jobID, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateJobStatusAndOutput provides a mock function with given fields: ctx, batchJobID, status, outputFileID
func (_m *JobStore) UpdateJobStatusAndOutput(ctx context.Context, batchJobID string, status string, outputFileID string) error {
	ret := _m.Called(ctx, batchJobID, status, outputFileID)

	if len(ret) == 0 {
		panic("no return value specified for UpdateJobStatusAndOutput")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, batchJobID, status, outputFileID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewJobStore creates a new instance of JobStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewJobStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *JobStore {
	mock := &JobStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
