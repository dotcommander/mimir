package mock_store

import (
	"context"
	asynq "github.com/hibiken/asynq"
	mock "github.com/stretchr/testify/mock"
)

// JobClient is an autogenerated mock type for the JobClient type
type JobClient struct {
	mock.Mock
}

// Close provides a mock function with no fields
func (_m *JobClient) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Enqueue provides a mock function with given fields: ctx, task, relatedEntityType, relatedEntityID, opts
func (_m *JobClient) Enqueue(ctx context.Context, task *asynq.Task, relatedEntityType string, relatedEntityID int64, opts ...asynq.Option) (*asynq.TaskInfo, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, task, relatedEntityType, relatedEntityID) // Add new params
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Enqueue")
	}

	var r0 *asynq.TaskInfo
	var r1 error
	// Update the function signature in the type assertion
	if rf, ok := ret.Get(0).(func(context.Context, *asynq.Task, string, int64, ...asynq.Option) (*asynq.TaskInfo, error)); ok {
		return rf(ctx, task, relatedEntityType, relatedEntityID, opts...)
	}
	// Update the function signature in the type assertion
	if rf, ok := ret.Get(0).(func(context.Context, *asynq.Task, string, int64, ...asynq.Option) *asynq.TaskInfo); ok {
		r0 = rf(ctx, task, relatedEntityType, relatedEntityID, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*asynq.TaskInfo)
		}
	}

	// Update the function signature in the type assertion
	if rf, ok := ret.Get(1).(func(context.Context, *asynq.Task, string, int64, ...asynq.Option) error); ok {
		r1 = rf(ctx, task, relatedEntityType, relatedEntityID, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EnqueueEmbeddingJob provides a mock function with given fields: ctx, contentID
func (_m *JobClient) EnqueueEmbeddingJob(ctx context.Context, contentID int64) error {
	ret := _m.Called(ctx, contentID)

	if len(ret) == 0 {
		panic("no return value specified for EnqueueEmbeddingJob")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, contentID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewJobClient creates a new instance of JobClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewJobClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *JobClient {
	mock := &JobClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
