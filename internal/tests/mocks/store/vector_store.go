// Code generated by mockery v2.53.3. DO NOT EDIT.

package mock_store

import (
	context "context"
	models "mimir/internal/models"
	// store "mimir/internal/store" // Removed unused import

	mock "github.com/stretchr/testify/mock"

	pgvector "github.com/pgvector/pgvector-go"

	"mimir/internal/services"

	uuid "github.com/google/uuid"
)

// VectorStore is an autogenerated mock type for the VectorStore type
type VectorStore struct {
	mock.Mock
}

// AddEmbedding provides a mock function with given fields: ctx, entry
func (_m *VectorStore) AddEmbedding(ctx context.Context, entry *models.EmbeddingEntry) error {
	ret := _m.Called(ctx, entry)

	if len(ret) == 0 {
		panic("no return value specified for AddEmbedding")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.EmbeddingEntry) error); ok {
		r0 = rf(ctx, entry)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Close provides a mock function with no fields
func (_m *VectorStore) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteEmbeddingsByContentID provides a mock function with given fields: ctx, contentID
func (_m *VectorStore) DeleteEmbeddingsByContentID(ctx context.Context, contentID int64) error {
	ret := _m.Called(ctx, contentID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteEmbeddingsByContentID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, contentID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetEmbedding provides a mock function with given fields: ctx, id
func (_m *VectorStore) GetEmbedding(ctx context.Context, id uuid.UUID) (*models.EmbeddingEntry, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetEmbedding")
	}

	var r0 *models.EmbeddingEntry
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*models.EmbeddingEntry, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *models.EmbeddingEntry); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.EmbeddingEntry)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEmbeddingByID provides a mock function with given fields: ctx, id
func (_m *VectorStore) GetEmbeddingByID(ctx context.Context, id uuid.UUID) (*models.EmbeddingEntry, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetEmbeddingByID")
	}

	var r0 *models.EmbeddingEntry
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*models.EmbeddingEntry, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *models.EmbeddingEntry); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.EmbeddingEntry)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Ping provides a mock function with given fields: ctx
func (_m *VectorStore) Ping(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Ping")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SearchSimilar provides a mock function with given fields: ctx, queryVector, k
func (_m *VectorStore) SearchSimilar(ctx context.Context, queryVector pgvector.Vector, k int) ([]services.SearchResultItem, error) {
	ret := _m.Called(ctx, queryVector, k)

	if len(ret) == 0 {
		panic("no return value specified for SearchSimilar")
	}

	var r0 []services.SearchResultItem
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, pgvector.Vector, int) ([]services.SearchResultItem, error)); ok {
		return rf(ctx, queryVector, k)
	}
	if rf, ok := ret.Get(0).(func(context.Context, pgvector.Vector, int) []services.SearchResultItem); ok {
		r0 = rf(ctx, queryVector, k)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]services.SearchResultItem)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, pgvector.Vector, int) error); ok {
		r1 = rf(ctx, queryVector, k)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SimilaritySearch provides a mock function with given fields: ctx, queryVector, k, filterMetadata
func (_m *VectorStore) SimilaritySearch(ctx context.Context, queryVector pgvector.Vector, k int, filterMetadata map[string]interface{}) ([]models.SearchResult, error) {
	ret := _m.Called(ctx, queryVector, k, filterMetadata)

	if len(ret) == 0 {
		panic("no return value specified for SimilaritySearch")
	}

	var r0 []models.SearchResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, pgvector.Vector, int, map[string]interface{}) ([]models.SearchResult, error)); ok {
		return rf(ctx, queryVector, k, filterMetadata)
	}
	if rf, ok := ret.Get(0).(func(context.Context, pgvector.Vector, int, map[string]interface{}) []models.SearchResult); ok {
		r0 = rf(ctx, queryVector, k, filterMetadata)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.SearchResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, pgvector.Vector, int, map[string]interface{}) error); ok {
		r1 = rf(ctx, queryVector, k, filterMetadata)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewVectorStore creates a new instance of VectorStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewVectorStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *VectorStore {
	mock := &VectorStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
