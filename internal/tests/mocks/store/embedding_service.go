/*
// Code generated by mockery v2.53.3. DO NOT EDIT.
*/

package mock_store

import (
	context "context"
	store "mimir/internal/store" // Import the store package

	pgvector "github.com/pgvector/pgvector-go"
	mock "github.com/stretchr/testify/mock"
)

// EmbeddingService is an autogenerated mock type for the EmbeddingService type
type EmbeddingService struct {
	mock.Mock
}

// Dimension provides a mock function with no fields
func (_m *EmbeddingService) Dimension() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Dimension")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// GenerateEmbedding provides a mock function with given fields: ctx, text
func (_m *EmbeddingService) GenerateEmbedding(ctx context.Context, text string) (pgvector.Vector, error) {
	ret := _m.Called(ctx, text)

	if len(ret) == 0 {
		panic("no return value specified for GenerateEmbedding")
	}

	var r0 pgvector.Vector
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (pgvector.Vector, error)); ok {
		return rf(ctx, text)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) pgvector.Vector); ok {
		r0 = rf(ctx, text)
	} else {
		r0 = ret.Get(0).(pgvector.Vector)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, text)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GenerateEmbeddings provides a mock function with given fields: ctx, texts
func (_m *EmbeddingService) GenerateEmbeddings(ctx context.Context, texts []string) ([]pgvector.Vector, error) {
	ret := _m.Called(ctx, texts)

	if len(ret) == 0 {
		panic("no return value specified for GenerateEmbeddings")
	}

	var r0 []pgvector.Vector
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []string) ([]pgvector.Vector, error)); ok {
		return rf(ctx, texts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []string) []pgvector.Vector); ok {
		r0 = rf(ctx, texts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]pgvector.Vector)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []string) error); ok {
		r1 = rf(ctx, texts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModelName provides a mock function with no fields
func (_m *EmbeddingService) ModelName() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ModelName")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Name provides a mock function with no fields
func (_m *EmbeddingService) Name() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Status provides a mock function with no fields
func (_m *EmbeddingService) Status() store.ProviderStatus {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Status")
	}

	var r0 store.ProviderStatus
	if rf, ok := ret.Get(0).(func() store.ProviderStatus); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(store.ProviderStatus)
	}

	return r0
}

// NewEmbeddingService creates a new instance of EmbeddingService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEmbeddingService(t interface {
	mock.TestingT
	Cleanup(func())
}) *EmbeddingService {
	mock := &EmbeddingService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
