openapi: 3.0.3
info:
  title: Mimir API
  version: "1.0"
  description: Personal knowledge base API (content, search, collections, tags)
paths:
  /api/v1/content:
    post:
      summary: Add new content
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [title, source, body]
              properties:
                title: { type: string }
                source: { type: string }
                body: { type: string }
      responses:
        '200': { description: Content added }
    get:
      summary: List content
      parameters:
        - in: query
          name: limit
          schema: { type: integer, default: 10 }
        - in: query
          name: offset
          schema: { type: integer, default: 0 }
        - in: query
          name: tags
          schema: { type: string, description: "comma separated tags" }
      responses:
        '200': { description: List of content }
  /api/v1/content/{id}:
    delete:
      summary: Delete content
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      responses:
        '200': { description: Deleted }
  /api/v1/search:
    get:
      summary: Semantic search
      parameters:
        - in: query
          name: q
          required: true
          schema: { type: string }
        - in: query
          name: limit
          schema: { type: integer, default: 10 }
        - in: query
          name: tags
          schema: { type: string }
      responses:
        '200': { description: Search results }
  /api/v1/keyword:
    get:
      summary: Full-text keyword search
      parameters:
        - in: query
          name: q
          required: true
          schema: { type: string }
        - in: query
          name: tags
          schema: { type: string }
        - in: query
          name: limit
          schema: { type: integer, default: 10 }
      responses:
        '200': { description: Keyword search results }
  /api/v1/collections:
    get:
      summary: List collections
      responses:
        '200': { description: List }
    post:
      summary: Create collection
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name]
              properties:
                name: { type: string }
                description: { type: string }
                pinned: { type: boolean }
      responses:
        '200': { description: Created }
  /api/v1/collections/{id}/content:
    post:
      summary: Add content to collection
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [content_id]
              properties:
                content_id: { type: integer }
      responses:
        '200': { description: Added }
    delete:
      summary: Remove content from collection
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [content_id]
              properties:
                content_id: { type: integer }
      responses:
        '200': { description: Removed }
  /api/v1/collections/{id}/list:
    get:
      summary: List content in collection
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
        - in: query
          name: limit
          schema: { type: integer, default: 10 }
        - in: query
          name: offset
          schema: { type: integer, default: 0 }
        - in: query
          name: tags
          schema: { type: string }
      responses:
        '200': { description: Content list }
  /api/v1/tags:
    get:
      summary: List all tags
      responses:
        '200': { description: Tag list }
  /api/v1/content/{id}/tags:
    get:
      summary: List tags for content item
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      responses:
        '200': { description: Tag list }
    post:
      summary: Add tag(s) to content item
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [tags]
              properties:
                tags:
                  type: array
                  items: { type: string }
      responses:
        '200': { description: Added tags }
    delete:
      summary: Remove tag(s) from content item
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [tags]
              properties:
                tags:
                  type: array
                  items: { type: string }
      responses:
        '200': { description: Removed tags }