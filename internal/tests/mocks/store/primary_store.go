// Code generated by mockery v2.53.3. DO NOT EDIT.

package mock_store

import (
	context "context"
	models "mimir/internal/models"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// PrimaryStore is an autogenerated mock type for the PrimaryStore type
type PrimaryStore struct {
	mock.Mock
}

// AddContentToCollection provides a mock function with given fields: ctx, contentID, collectionID
func (_m *PrimaryStore) AddContentToCollection(ctx context.Context, contentID int64, collectionID int64) error {
	ret := _m.Called(ctx, contentID, collectionID)

	if len(ret) == 0 {
		panic("no return value specified for AddContentToCollection")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) error); ok {
		r0 = rf(ctx, contentID, collectionID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddTagsToContent provides a mock function with given fields: ctx, contentID, tagIDs
func (_m *PrimaryStore) AddTagsToContent(ctx context.Context, contentID int64, tagIDs []int64) error {
	ret := _m.Called(ctx, contentID, tagIDs)

	if len(ret) == 0 {
		panic("no return value specified for AddTagsToContent")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, []int64) error); ok {
		r0 = rf(ctx, contentID, tagIDs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddTagToContent provides a mock function with given fields: ctx, contentID, tagID
func (_m *PrimaryStore) AddTagToContent(ctx context.Context, contentID int64, tagID int64) error {
	ret := _m.Called(ctx, contentID, tagID)

	if len(ret) == 0 {
		panic("no return value specified for AddTagToContent")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) error); ok {
		r0 = rf(ctx, contentID, tagID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateCollection provides a mock function with given fields: ctx, collection
func (_m *PrimaryStore) CreateCollection(ctx context.Context, collection *models.Collection) error {
	ret := _m.Called(ctx, collection)

	if len(ret) == 0 {
		panic("no return value specified for CreateCollection")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Collection) error); ok {
		r0 = rf(ctx, collection)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateContent provides a mock function with given fields: ctx, content
func (_m *PrimaryStore) CreateContent(ctx context.Context, content *models.Content) error {
	ret := _m.Called(ctx, content)

	if len(ret) == 0 {
		panic("no return value specified for CreateContent")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Content) error); ok {
		r0 = rf(ctx, content)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateContentIfNotExists provides a mock function with given fields: ctx, content
func (_m *PrimaryStore) CreateContentIfNotExists(ctx context.Context, content *models.Content) (bool, error) {
	ret := _m.Called(ctx, content)

	if len(ret) == 0 {
		panic("no return value specified for CreateContentIfNotExists")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Content) (bool, error)); ok {
		return rf(ctx, content)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.Content) bool); ok {
		r0 = rf(ctx, content)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.Content) error); ok {
		r1 = rf(ctx, content)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTag provides a mock function with given fields: ctx, tag
func (_m *PrimaryStore) CreateTag(ctx context.Context, tag *models.Tag) error {
	ret := _m.Called(ctx, tag)

	if len(ret) == 0 {
		panic("no return value specified for CreateTag")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Tag) error); ok {
		r0 = rf(ctx, tag)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateSearchQuery provides a mock function with given fields: ctx, sq
func (_m *PrimaryStore) CreateSearchQuery(ctx context.Context, sq *models.SearchQuery) error {
	ret := _m.Called(ctx, sq)

	if len(ret) == 0 {
		panic("no return value specified for CreateSearchQuery")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.SearchQuery) error); ok {
		r0 = rf(ctx, sq)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateSearchResult provides a mock function with given fields: ctx, sr
func (_m *PrimaryStore) CreateSearchResult(ctx context.Context, sr *models.SearchResult) error {
	ret := _m.Called(ctx, sr)

	if len(ret) == 0 {
		panic("no return value specified for CreateSearchResult")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.SearchResult) error); ok {
		r0 = rf(ctx, sr)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateSource provides a mock function with given fields: ctx, source
func (_m *PrimaryStore) CreateSource(ctx context.Context, source *models.Source) error {
	ret := _m.Called(ctx, source)

	if len(ret) == 0 {
		panic("no return value specified for CreateSource")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Source) error); ok {
		r0 = rf(ctx, source)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteContent provides a mock function with given fields: ctx, id
func (_m *PrimaryStore) DeleteContent(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteContent")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindContentByHash provides a mock function with given fields: ctx, hash
func (_m *PrimaryStore) FindContentByHash(ctx context.Context, hash string) (*models.Content, error) {
	ret := _m.Called(ctx, hash)

	if len(ret) == 0 {
		panic("no return value specified for FindContentByHash")
	}

	var r0 *models.Content
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.Content, error)); ok {
		return rf(ctx, hash)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.Content); ok {
		r0 = rf(ctx, hash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Content)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, hash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCollection provides a mock function with given fields: ctx, id
func (_m *PrimaryStore) GetCollection(ctx context.Context, id int64) (*models.Collection, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetCollection")
	}

	var r0 *models.Collection
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*models.Collection, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *models.Collection); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Collection)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetContent provides a mock function with given fields: ctx, id
func (_m *PrimaryStore) GetContent(ctx context.Context, id int64) (*models.Content, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetContent")
	}

	var r0 *models.Content
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*models.Content, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *models.Content); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Content)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetContentTags provides a mock function with given fields: ctx, contentID
func (_m *PrimaryStore) GetContentTags(ctx context.Context, contentID int64) ([]*models.Tag, error) {
	ret := _m.Called(ctx, contentID)

	if len(ret) == 0 {
		panic("no return value specified for GetContentTags")
	}

	var r0 []*models.Tag
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) ([]*models.Tag, error)); ok {
		return rf(ctx, contentID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) []*models.Tag); ok {
		r0 = rf(ctx, contentID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Tag)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, contentID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetContentsByIDs provides a mock function with given fields: ctx, ids
func (_m *PrimaryStore) GetContentsByIDs(ctx context.Context, ids []int64) ([]*models.Content, error) {
	ret := _m.Called(ctx, ids)

	if len(ret) == 0 {
		panic("no return value specified for GetContentsByIDs")
	}

	var r0 []*models.Content
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []int64) ([]*models.Content, error)); ok {
		return rf(ctx, ids)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []int64) []*models.Content); ok {
		r0 = rf(ctx, ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Content)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []int64) error); ok {
		r1 = rf(ctx, ids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrCreateTagsByName provides a mock function with given fields: ctx, names
func (_m *PrimaryStore) GetOrCreateTagsByName(ctx context.Context, names []string) ([]*models.Tag, error) {
	ret := _m.Called(ctx, names)

	if len(ret) == 0 {
		panic("no return value specified for GetOrCreateTagsByName")
	}

	var r0 []*models.Tag
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []string) ([]*models.Tag, error)); ok {
		return rf(ctx, names)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []string) []*models.Tag); ok {
		r0 = rf(ctx, names)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Tag)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []string) error); ok {
		r1 = rf(ctx, names)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrCreateTag provides a mock function with given fields: ctx, name
func (_m *PrimaryStore) GetOrCreateTag(ctx context.Context, name string) (*models.Tag, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetOrCreateTag")
	}

	var r0 *models.Tag
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.Tag, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.Tag); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Tag)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSourceByName provides a mock function with given fields: ctx, name
func (_m *PrimaryStore) GetSourceByName(ctx context.Context, name string) (*models.Source, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetSourceByName")
	}

	var r0 *models.Source
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.Source, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.Source); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Source)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTag provides a mock function with given fields: ctx, id
func (_m *PrimaryStore) GetTag(ctx context.Context, id int64) (*models.Tag, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetTag")
	}

	var r0 *models.Tag
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*models.Tag, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *models.Tag); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Tag)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTagsForContents provides a mock function with given fields: ctx, contentIDs
func (_m *PrimaryStore) GetTagsForContents(ctx context.Context, contentIDs []int64) (map[int64][]*models.Tag, error) {
	ret := _m.Called(ctx, contentIDs)

	if len(ret) == 0 {
		panic("no return value specified for GetTagsForContents")
	}

	var r0 map[int64][]*models.Tag
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []int64) (map[int64][]*models.Tag, error)); ok {
		return rf(ctx, contentIDs)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []int64) map[int64][]*models.Tag); ok {
		r0 = rf(ctx, contentIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[int64][]*models.Tag)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []int64) error); ok {
		r1 = rf(ctx, contentIDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTagBySlug provides a mock function with given fields: ctx, slug
func (_m *PrimaryStore) GetTagBySlug(ctx context.Context, slug string) (*models.Tag, error) {
	ret := _m.Called(ctx, slug)

	if len(ret) == 0 {
		panic("no return value specified for GetTagBySlug")
	}

	var r0 *models.Tag
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.Tag, error)); ok {
		return rf(ctx, slug)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.Tag); ok {
		r0 = rf(ctx, slug)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Tag)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, slug)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// KeywordSearchContent provides a mock function with given fields: ctx, query, filterTags
func (_m *PrimaryStore) KeywordSearchContent(ctx context.Context, query string, filterTags []string) ([]*models.Content, error) {
	ret := _m.Called(ctx, query, filterTags)

	if len(ret) == 0 {
		panic("no return value specified for KeywordSearchContent")
	}

	var r0 []*models.Content
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []string) ([]*models.Content, error)); ok {
		return rf(ctx, query, filterTags)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, []string) []*models.Content); ok {
		r0 = rf(ctx, query, filterTags)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Content)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, []string) error); ok {
		r1 = rf(ctx, query, filterTags)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Ping provides a mock function with given fields: ctx
func (_m *PrimaryStore) Ping(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Ping")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListCollections provides a mock function with given fields: ctx
func (_m *PrimaryStore) ListCollections(ctx context.Context) ([]*models.Collection, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListCollections")
	}

	var r0 []*models.Collection
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*models.Collection, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*models.Collection); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Collection)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCollectionByName provides a mock function with given fields: ctx, name
func (_m *PrimaryStore) GetCollectionByName(ctx context.Context, name string) (*models.Collection, error) {
	ret := _m.Called(ctx, name)

	var r0 *models.Collection
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.Collection); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Collection)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTags provides a mock function with given fields: ctx, limit, offset
func (_m *PrimaryStore) ListTags(ctx context.Context, limit int, offset int) ([]*models.Tag, error) {
	ret := _m.Called(ctx, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for ListTags")
	}

	var r0 []*models.Tag
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) ([]*models.Tag, error)); ok {
		return rf(ctx, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int) []*models.Tag); ok {
		r0 = rf(ctx, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Tag)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = rf(ctx, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListContent provides a mock function with given fields: ctx, limit, offset, sortBy, sortOrder, filterTags
func (_m *PrimaryStore) ListContent(ctx context.Context, limit int, offset int, sortBy string, sortOrder string, filterTags []string) ([]*models.Content, error) {
	ret := _m.Called(ctx, limit, offset, sortBy, sortOrder, filterTags)

	if len(ret) == 0 {
		panic("no return value specified for ListContent")
	}

	var r0 []*models.Content
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int, string, string, []string) ([]*models.Content, error)); ok {
		return rf(ctx, limit, offset, sortBy, sortOrder, filterTags)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int, string, string, []string) []*models.Content); ok {
		r0 = rf(ctx, limit, offset, sortBy, sortOrder, filterTags)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Content)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int, string, string, []string) error); ok {
		r1 = rf(ctx, limit, offset, sortBy, sortOrder, filterTags)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListContentByCollection provides a mock function with given fields: ctx, collectionID, limit, offset, sortBy, sortOrder
func (_m *PrimaryStore) ListContentByCollection(ctx context.Context, collectionID int64, limit int, offset int, sortBy string, sortOrder string) ([]*models.Content, error) {
	ret := _m.Called(ctx, collectionID, limit, offset, sortBy, sortOrder)

	if len(ret) == 0 {
		panic("no return value specified for ListContentByCollection")
	}

	var r0 []*models.Content
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int, int, string, string) ([]*models.Content, error)); ok {
		return rf(ctx, collectionID, limit, offset, sortBy, sortOrder)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, int, int, string, string) []*models.Content); ok {
		r0 = rf(ctx, collectionID, limit, offset, sortBy, sortOrder)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Content)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, int, int, string, string) error); ok {
		r1 = rf(ctx, collectionID, limit, offset, sortBy, sortOrder)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSources provides a mock function with given fields: ctx
func (_m *PrimaryStore) ListSources(ctx context.Context) ([]*models.Source, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListSources")
	}

	var r0 []*models.Source
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*models.Source, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*models.Source); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Source)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveTagFromContent provides a mock function with given fields: ctx, contentID, tagID
func (_m *PrimaryStore) RemoveTagFromContent(ctx context.Context, contentID int64, tagID int64) error {
	ret := _m.Called(ctx, contentID, tagID)

	if len(ret) == 0 {
		panic("no return value specified for RemoveTagFromContent")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) error); ok {
		r0 = rf(ctx, contentID, tagID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveContentFromCollection provides a mock function with given fields: ctx, contentID, collectionID
func (_m *PrimaryStore) RemoveContentFromCollection(ctx context.Context, contentID int64, collectionID int64) error {
	ret := _m.Called(ctx, contentID, collectionID)

	if len(ret) == 0 {
		panic("no return value specified for RemoveContentFromCollection")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) error); ok {
		r0 = rf(ctx, contentID, collectionID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateContent provides a mock function with given fields: ctx, content
func (_m *PrimaryStore) UpdateContent(ctx context.Context, content *models.Content) error {
	ret := _m.Called(ctx, content)

	if len(ret) == 0 {
		panic("no return value specified for UpdateContent")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Content) error); ok {
		r0 = rf(ctx, content)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateContentEmbeddingStatus provides a mock function with given fields: ctx, contentID, embeddingID, isEmbedded
func (_m *PrimaryStore) UpdateContentEmbeddingStatus(ctx context.Context, contentID int64, embeddingID uuid.UUID, isEmbedded bool) error {
	ret := _m.Called(ctx, contentID, embeddingID, isEmbedded)

	if len(ret) == 0 {
		panic("no return value specified for UpdateContentEmbeddingStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, uuid.UUID, bool) error); ok {
		r0 = rf(ctx, contentID, embeddingID, isEmbedded)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteCollection provides a mock function with given fields: ctx, id
func (_m *PrimaryStore) DeleteCollection(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCollection")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewPrimaryStore creates a new instance of PrimaryStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPrimaryStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *PrimaryStore {
	mock := &PrimaryStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
