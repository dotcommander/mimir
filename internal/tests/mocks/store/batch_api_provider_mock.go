package mock_store

import (
	context "context"

	openai "github.com/sashabaranov/go-openai"
	"github.com/stretchr/testify/mock"
)

// BatchAPIProviderMock is an autogenerated mock type for the BatchAPIProvider interface
type BatchAPIProviderMock struct {
	mock.Mock
}

// CreateBatch provides a mock function with given fields: ctx, inputFileID, endpoint, completionWindow
func (_m *BatchAPIProviderMock) CreateBatch(ctx context.Context, inputFileID string, endpoint string, completionWindow string) (openai.BatchResponse, error) {
	ret := _m.Called(ctx, inputFileID, endpoint, completionWindow)

	if len(ret) == 0 {
		panic("no return value specified for CreateBatch")
	}

	var r0 openai.BatchResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (openai.BatchResponse, error)); ok {
		return rf(ctx, inputFileID, endpoint, completionWindow)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) openai.BatchResponse); ok {
		r0 = rf(ctx, inputFileID, endpoint, completionWindow)
	} else {
		r0 = ret.Get(0).(openai.BatchResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, inputFileID, endpoint, completionWindow)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateFile provides a mock function with given fields: ctx, fileName, fileContent
func (_m *BatchAPIProviderMock) CreateFile(ctx context.Context, fileName string, fileContent []byte) (string, error) {
	ret := _m.Called(ctx, fileName, fileContent)

	if len(ret) == 0 {
		panic("no return value specified for CreateFile")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []byte) (string, error)); ok {
		return rf(ctx, fileName, fileContent)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, []byte) string); ok {
		r0 = rf(ctx, fileName, fileContent)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, []byte) error); ok {
		r1 = rf(ctx, fileName, fileContent)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFileContent provides a mock function with given fields: ctx, fileID
func (_m *BatchAPIProviderMock) GetFileContent(ctx context.Context, fileID string) ([]byte, error) {
	ret := _m.Called(ctx, fileID)

	if len(ret) == 0 {
		panic("no return value specified for GetFileContent")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]byte, error)); ok {
		return rf(ctx, fileID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []byte); ok {
		r0 = rf(ctx, fileID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, fileID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RetrieveBatch provides a mock function with given fields: ctx, batchID
func (_m *BatchAPIProviderMock) RetrieveBatch(ctx context.Context, batchID string) (openai.BatchResponse, error) {
	ret := _m.Called(ctx, batchID)

	if len(ret) == 0 {
		panic("no return value specified for RetrieveBatch")
	}

	var r0 openai.BatchResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (openai.BatchResponse, error)); ok {
		return rf(ctx, batchID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) openai.BatchResponse); ok {
		r0 = rf(ctx, batchID)
	} else {
		r0 = ret.Get(0).(openai.BatchResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, batchID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewBatchAPIProviderMock creates a new instance of BatchAPIProviderMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBatchAPIProviderMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *BatchAPIProviderMock {
	mock := &BatchAPIProviderMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
